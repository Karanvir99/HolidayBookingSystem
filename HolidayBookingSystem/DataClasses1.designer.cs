#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HolidayBookingSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kc9379m")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertcpRole(cpRole instance);
    partial void UpdatecpRole(cpRole instance);
    partial void DeletecpRole(cpRole instance);
    partial void InsertcpHolidayRequest(cpHolidayRequest instance);
    partial void UpdatecpHolidayRequest(cpHolidayRequest instance);
    partial void DeletecpHolidayRequest(cpHolidayRequest instance);
    partial void InsertcpHolidayEntitlement(cpHolidayEntitlement instance);
    partial void UpdatecpHolidayEntitlement(cpHolidayEntitlement instance);
    partial void DeletecpHolidayEntitlement(cpHolidayEntitlement instance);
    partial void InsertcpDepartment(cpDepartment instance);
    partial void UpdatecpDepartment(cpDepartment instance);
    partial void DeletecpDepartment(cpDepartment instance);
    partial void InsertcpUser(cpUser instance);
    partial void UpdatecpUser(cpUser instance);
    partial void DeletecpUser(cpUser instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::HolidayBookingSystem.Properties.Settings.Default.kc9379mConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<cpRole> cpRoles
		{
			get
			{
				return this.GetTable<cpRole>();
			}
		}
		
		public System.Data.Linq.Table<cpHolidayRequest> cpHolidayRequests
		{
			get
			{
				return this.GetTable<cpHolidayRequest>();
			}
		}
		
		public System.Data.Linq.Table<cpHolidayEntitlement> cpHolidayEntitlements
		{
			get
			{
				return this.GetTable<cpHolidayEntitlement>();
			}
		}
		
		public System.Data.Linq.Table<cpDepartment> cpDepartments
		{
			get
			{
				return this.GetTable<cpDepartment>();
			}
		}
		
		public System.Data.Linq.Table<cpUser> cpUsers
		{
			get
			{
				return this.GetTable<cpUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cpRole")]
	public partial class cpRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _roleName;
		
		private EntitySet<cpUser> _cpUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public cpRole()
		{
			this._cpUsers = new EntitySet<cpUser>(new Action<cpUser>(this.attach_cpUsers), new Action<cpUser>(this.detach_cpUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpRole_cpUser", Storage="_cpUsers", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<cpUser> cpUsers
		{
			get
			{
				return this._cpUsers;
			}
			set
			{
				this._cpUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cpUsers(cpUser entity)
		{
			this.SendPropertyChanging();
			entity.cpRole = this;
		}
		
		private void detach_cpUsers(cpUser entity)
		{
			this.SendPropertyChanging();
			entity.cpRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cpHolidayRequest")]
	public partial class cpHolidayRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HolidayRequestID;
		
		private int _UserID;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private string _status;
		
		private EntityRef<cpUser> _cpUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayRequestIDChanging(int value);
    partial void OnHolidayRequestIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public cpHolidayRequest()
		{
			this._cpUser = default(EntityRef<cpUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayRequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HolidayRequestID
		{
			get
			{
				return this._HolidayRequestID;
			}
			set
			{
				if ((this._HolidayRequestID != value))
				{
					this.OnHolidayRequestIDChanging(value);
					this.SendPropertyChanging();
					this._HolidayRequestID = value;
					this.SendPropertyChanged("HolidayRequestID");
					this.OnHolidayRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._cpUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpUser_cpHolidayRequest", Storage="_cpUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public cpUser cpUser
		{
			get
			{
				return this._cpUser.Entity;
			}
			set
			{
				cpUser previousValue = this._cpUser.Entity;
				if (((previousValue != value) 
							|| (this._cpUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cpUser.Entity = null;
						previousValue.cpHolidayRequests.Remove(this);
					}
					this._cpUser.Entity = value;
					if ((value != null))
					{
						value.cpHolidayRequests.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("cpUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cpHolidayEntitlement")]
	public partial class cpHolidayEntitlement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HolidayEntitlementID;
		
		private int _UserID;
		
		private int _holidayEntitlement;
		
		private int _holidayTaken;
		
		private int _holidayRemaining;
		
		private int _holidayDuringPeakTime;
		
		private EntityRef<cpUser> _cpUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayEntitlementIDChanging(int value);
    partial void OnHolidayEntitlementIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnholidayEntitlementChanging(int value);
    partial void OnholidayEntitlementChanged();
    partial void OnholidayTakenChanging(int value);
    partial void OnholidayTakenChanged();
    partial void OnholidayRemainingChanging(int value);
    partial void OnholidayRemainingChanged();
    partial void OnholidayDuringPeakTimeChanging(int value);
    partial void OnholidayDuringPeakTimeChanged();
    #endregion
		
		public cpHolidayEntitlement()
		{
			this._cpUser = default(EntityRef<cpUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayEntitlementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HolidayEntitlementID
		{
			get
			{
				return this._HolidayEntitlementID;
			}
			set
			{
				if ((this._HolidayEntitlementID != value))
				{
					this.OnHolidayEntitlementIDChanging(value);
					this.SendPropertyChanging();
					this._HolidayEntitlementID = value;
					this.SendPropertyChanged("HolidayEntitlementID");
					this.OnHolidayEntitlementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._cpUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holidayEntitlement", DbType="Int NOT NULL")]
		public int holidayEntitlement
		{
			get
			{
				return this._holidayEntitlement;
			}
			set
			{
				if ((this._holidayEntitlement != value))
				{
					this.OnholidayEntitlementChanging(value);
					this.SendPropertyChanging();
					this._holidayEntitlement = value;
					this.SendPropertyChanged("holidayEntitlement");
					this.OnholidayEntitlementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holidayTaken", DbType="Int NOT NULL")]
		public int holidayTaken
		{
			get
			{
				return this._holidayTaken;
			}
			set
			{
				if ((this._holidayTaken != value))
				{
					this.OnholidayTakenChanging(value);
					this.SendPropertyChanging();
					this._holidayTaken = value;
					this.SendPropertyChanged("holidayTaken");
					this.OnholidayTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holidayRemaining", DbType="Int NOT NULL")]
		public int holidayRemaining
		{
			get
			{
				return this._holidayRemaining;
			}
			set
			{
				if ((this._holidayRemaining != value))
				{
					this.OnholidayRemainingChanging(value);
					this.SendPropertyChanging();
					this._holidayRemaining = value;
					this.SendPropertyChanged("holidayRemaining");
					this.OnholidayRemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holidayDuringPeakTime", DbType="Int NOT NULL")]
		public int holidayDuringPeakTime
		{
			get
			{
				return this._holidayDuringPeakTime;
			}
			set
			{
				if ((this._holidayDuringPeakTime != value))
				{
					this.OnholidayDuringPeakTimeChanging(value);
					this.SendPropertyChanging();
					this._holidayDuringPeakTime = value;
					this.SendPropertyChanged("holidayDuringPeakTime");
					this.OnholidayDuringPeakTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpUser_cpHolidayEntitlement", Storage="_cpUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public cpUser cpUser
		{
			get
			{
				return this._cpUser.Entity;
			}
			set
			{
				cpUser previousValue = this._cpUser.Entity;
				if (((previousValue != value) 
							|| (this._cpUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cpUser.Entity = null;
						previousValue.cpHolidayEntitlements.Remove(this);
					}
					this._cpUser.Entity = value;
					if ((value != null))
					{
						value.cpHolidayEntitlements.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("cpUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cpDepartment")]
	public partial class cpDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _departmentName;
		
		private EntitySet<cpUser> _cpUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OndepartmentNameChanging(string value);
    partial void OndepartmentNameChanged();
    #endregion
		
		public cpDepartment()
		{
			this._cpUsers = new EntitySet<cpUser>(new Action<cpUser>(this.attach_cpUsers), new Action<cpUser>(this.detach_cpUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string departmentName
		{
			get
			{
				return this._departmentName;
			}
			set
			{
				if ((this._departmentName != value))
				{
					this.OndepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._departmentName = value;
					this.SendPropertyChanged("departmentName");
					this.OndepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpDepartment_cpUser", Storage="_cpUsers", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<cpUser> cpUsers
		{
			get
			{
				return this._cpUsers;
			}
			set
			{
				this._cpUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cpUsers(cpUser entity)
		{
			this.SendPropertyChanging();
			entity.cpDepartment = this;
		}
		
		private void detach_cpUsers(cpUser entity)
		{
			this.SendPropertyChanging();
			entity.cpDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cpUser")]
	public partial class cpUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private System.Nullable<int> _DepartmentID;
		
		private int _RoleID;
		
		private string _forename;
		
		private string _lastname;
		
		private string _address;
		
		private string _phoneNumber;
		
		private System.DateTime _dateJoined;
		
		private string _username;
		
		private string _password;
		
		private bool _admin;
		
		private EntitySet<cpHolidayRequest> _cpHolidayRequests;
		
		private EntitySet<cpHolidayEntitlement> _cpHolidayEntitlements;
		
		private EntityRef<cpDepartment> _cpDepartment;
		
		private EntityRef<cpRole> _cpRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnforenameChanging(string value);
    partial void OnforenameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OndateJoinedChanging(System.DateTime value);
    partial void OndateJoinedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnadminChanging(bool value);
    partial void OnadminChanged();
    #endregion
		
		public cpUser()
		{
			this._cpHolidayRequests = new EntitySet<cpHolidayRequest>(new Action<cpHolidayRequest>(this.attach_cpHolidayRequests), new Action<cpHolidayRequest>(this.detach_cpHolidayRequests));
			this._cpHolidayEntitlements = new EntitySet<cpHolidayEntitlement>(new Action<cpHolidayEntitlement>(this.attach_cpHolidayEntitlements), new Action<cpHolidayEntitlement>(this.detach_cpHolidayEntitlements));
			this._cpDepartment = default(EntityRef<cpDepartment>);
			this._cpRole = default(EntityRef<cpRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._cpDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._cpRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forename", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string forename
		{
			get
			{
				return this._forename;
			}
			set
			{
				if ((this._forename != value))
				{
					this.OnforenameChanging(value);
					this.SendPropertyChanging();
					this._forename = value;
					this.SendPropertyChanged("forename");
					this.OnforenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateJoined", DbType="Date NOT NULL")]
		public System.DateTime dateJoined
		{
			get
			{
				return this._dateJoined;
			}
			set
			{
				if ((this._dateJoined != value))
				{
					this.OndateJoinedChanging(value);
					this.SendPropertyChanging();
					this._dateJoined = value;
					this.SendPropertyChanged("dateJoined");
					this.OndateJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit NOT NULL")]
		public bool admin
		{
			get
			{
				return this._admin;
			}
			set
			{
				if ((this._admin != value))
				{
					this.OnadminChanging(value);
					this.SendPropertyChanging();
					this._admin = value;
					this.SendPropertyChanged("admin");
					this.OnadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpUser_cpHolidayRequest", Storage="_cpHolidayRequests", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<cpHolidayRequest> cpHolidayRequests
		{
			get
			{
				return this._cpHolidayRequests;
			}
			set
			{
				this._cpHolidayRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpUser_cpHolidayEntitlement", Storage="_cpHolidayEntitlements", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<cpHolidayEntitlement> cpHolidayEntitlements
		{
			get
			{
				return this._cpHolidayEntitlements;
			}
			set
			{
				this._cpHolidayEntitlements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpDepartment_cpUser", Storage="_cpDepartment", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public cpDepartment cpDepartment
		{
			get
			{
				return this._cpDepartment.Entity;
			}
			set
			{
				cpDepartment previousValue = this._cpDepartment.Entity;
				if (((previousValue != value) 
							|| (this._cpDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cpDepartment.Entity = null;
						previousValue.cpUsers.Remove(this);
					}
					this._cpDepartment.Entity = value;
					if ((value != null))
					{
						value.cpUsers.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("cpDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cpRole_cpUser", Storage="_cpRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public cpRole cpRole
		{
			get
			{
				return this._cpRole.Entity;
			}
			set
			{
				cpRole previousValue = this._cpRole.Entity;
				if (((previousValue != value) 
							|| (this._cpRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cpRole.Entity = null;
						previousValue.cpUsers.Remove(this);
					}
					this._cpRole.Entity = value;
					if ((value != null))
					{
						value.cpUsers.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("cpRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cpHolidayRequests(cpHolidayRequest entity)
		{
			this.SendPropertyChanging();
			entity.cpUser = this;
		}
		
		private void detach_cpHolidayRequests(cpHolidayRequest entity)
		{
			this.SendPropertyChanging();
			entity.cpUser = null;
		}
		
		private void attach_cpHolidayEntitlements(cpHolidayEntitlement entity)
		{
			this.SendPropertyChanging();
			entity.cpUser = this;
		}
		
		private void detach_cpHolidayEntitlements(cpHolidayEntitlement entity)
		{
			this.SendPropertyChanging();
			entity.cpUser = null;
		}
	}
}
#pragma warning restore 1591
